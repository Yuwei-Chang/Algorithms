Problem: Given a integer dictionary A of unknown size, where the numbers in the dictionary are sorted in ascending order, 
determine if a given target integer T is in the dictionary. Return the index of T in A, return -1 if T is not in A.

Solution:
If we wanna use binary search, we need to know the right bound.
step 1: find the right bound, 10 times jump out
step 2: binary search to find target

TC Analysis:
jump out: log_10(n)
binary search: log_2(10n)
TC: O(log_10(n) + log_2(10n))
SC: O(1)

Code: 

public int find(Dictionary dict, int target) {
	if (dict == null) {
	  return -1;
  }
  int left = 0;
  int right = 1;
  while (dict.get(right) != null && dict.get(right) < target) {
	  left = right;
	  right *= 10;
  }
  while (left <= right) {
	  int mid = left + (right - left) / 2;
	  if (dict.get(mid) == null || dict.get(mid) > target) {
		  right = mid - 1;
    } else if (dict.get(mid) < target) {
	    left = mid + 1;
    } else {
	  return mid;
    }
  }
  return -1;
}
