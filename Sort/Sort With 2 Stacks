Problem: Given an array that is initially stored in one stack, sort it with one additional stack (total 2 stacks). 
         After sorting the original stack should contain the sorted integers and from top to bottom 
         the integers are sorted in ascending order
         
Solution: 
Regard stack2 as buffer and also to store sorted part.
eg.
s1   [1, 7, 3, 2, 4 || 4 || 4 || 7 4 3 2
cur: 4, 2, 4, 3, 4, 7, 1
s2   [4, 2, 4, 3, 4, 7 || 1 || 2347

Time Complexity: O(n^2)
Space Complexity: O(n) extra stack

Code:

public void sortWithTwoStacks(LinkedList<Integer> s1) {
    LinkedList<Integer> s2 = new LinkedList<>();
    if (s1 == null || s1.size() < 2) {
        return;
    }
    while (!s1.isEmpty()) {
        int curr = s1.pollFirst();
        while (!s2.isEmpty() && s2.peekFirst() > curr) {
            s1.offerFirst(s2.pollFirst());
        }
        s2.offerFirst(curr);
    }
    while (!s2.isEmpty()) {
        s1.offerFirst(s2.pollFirst());
    }
}
