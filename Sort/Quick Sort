Problem: Given an array of integers, sort the elements in the array in ascending order. 
         The quick sort algorithm should be used to solve this problem.
     
Solution:     
Quick sort method is randomly selecting a pivot, put elements which smaller than pivot to before the pivot. Put elements that larger than
or equal to pivot to behind the pivot.

Time Complexity: O(n^2), the worst case: each time select the most right or left one as pivot.
Space Complexity: O(n), the worst case: call stack is the length of array.

Block method: using 2 blocks to separate 3 areas
[0, i): elements that smaller than pivot
[i, j]: unsorted elements
(j, array.length - 1]: elements that larger than or equal to pivot
Go through the array, put elements into correct position as above.

Code:

public int[] quickSort(int[] array) {
	if (array == null || array.length == 0) {
		return array;
  }
  quickSort(array, 0, array.length - 1);
  return array;
}
private void quickSort(int[] array, int left, int right) {
	if (left >= right) {
	  return;
  }
  int pivotIndex = getPivot(left, right);
  int pivot = array[pivotIndex];
  swap(array, pivotIndex, right);
  int i = left;
  int j = right - 1;
  while (i <= j) {
	  if (array[i] < pivot) {
	    i++;
    } else if (array[j] >= pivot) {
	    j--;
    } else {
	    swap(array, i++, j--);
    }
  }
  swap(array, i, right);
  quickSort(array, left, i - 1);
  quickSort(array, i + 1, right);
}
private int getPivot(int left, int right) {
	return left + (int)Math.random()*(right - left + 1);
}
private void swap(int[] array, int i, int j) {
	int temp = array[i];
	array[i] = array[j];
	array[j] = temp;
}
